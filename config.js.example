module.exports = (client) => {
  return {
  // Bot Owner, level 10 by default. A User ID. Should never be anything else than the bot owner's ID.
    "ownerID": "123456789123456",

    // Bot Admins, level 9 by default. Array of user ID strings.
    "admins": [],

    // Bot Support, level 8 by default. Array of user ID strings
    "support": [],

    // Your Bot's Token. Available on https://discordapp.com/developers/applications/me
    "token": "mfa.VkO_2G4Qv3T--NO--lWetW_tjND--TOKEN--QFTm6YGtzq9PH--4U--tG0",

    // Set to true to make the bot output 'eval' output if it is too long to send to discord
    "logLongEval": false,

    // Default per-server settings. New guilds have these settings. 

    // DO NOT LEAVE ANY OF THESE BLANK, AS YOU WILL NOT BE ABLE TO UPDATE THEM
    // VIA COMMANDS IN THE GUILD.
  
    "defaultSettings" : {
      "prefix": "-",
      "modLogChannel": "mod-log",
      "modRole": "Moderator",
      "adminRole": "Administrator",
      "systemNotice": "true", // This gives a notice when a user tries to run a command that they do not have permission to use.
      "welcomeChannel": "welcome",
      "welcomeMessage": "Say hello to {{user}}, everyone! We all need a warm welcome sometimes :D",
      "welcomeEnabled": "false"
    },

    // PERMISSION LEVEL DEFINITIONS.

    permLevels: [
    // This is the lowest permisison level, this is for non-roled users.
      {
        level: 0,
        name: "User", 
        // Don't bother checking, just return true which allows them to execute any command their
        // level allows them to.
        check: () => true
      },

      // This is your permission level, the staff levels should always be above the rest of the roles.
      {
        level: 2,
        // This is the name of the role.
        name: "Moderator",
        guildMemberOnly: true,
        // The following lines check the guild the message came from for the roles.
        // Then it checks if the member that authored the message has the role.
        // If they do return true, which will allow them to execute the command in question.
        // If they don't then return false, which will prevent them from executing the command.
        check: (GuildMember) => {
          try {
            const modRole = GuildMember.guild.roles.find(r => r.name.toLowerCase() === client.guildData.get(GuildMember.guild.id).settings.modRole.toLowerCase());
            if (modRole && GuildMember.roles.has(modRole.id)) return true;
          } catch (e) {
            return false;
          }
        }
      },

      {
        level: 3,
        name: "Administrator", 
        guildMemberOnly: true,
        check: (GuildMember) => {
          try {
            const adminRole = GuildMember.guild.roles.find(r => r.name.toLowerCase() === client.guildData.get(GuildMember.guild.id).settings.adminRole.toLowerCase());
            return (adminRole && GuildMember.roles.has(adminRole.id));
          } catch (e) {
            return false;
          }
        }
      },
      // This is the server owner.
      {
        level: 4,
        name: "Server Owner",
        guildOnly: true,
        // Simple check, if the guild owner id matches the message author's ID, then it will return true.
        // Otherwise it will return false.
        check: (GuildMember) => GuildMember.guild.ownerID === GuildMember.id
      },

      // Bot Support is a special inbetween level that has the equivalent of server owner access
      // to any server they joins, in order to help troubleshoot the bot on behalf of owners.
      {
        level: 8,
        name: "Bot Support",
        // The check is by reading if an ID is part of this array. Yes, this means you need to
        // change this and reboot the bot to add a support user. Make it better yourself!
        check: (User) => client.config.support.includes(User.id)
      },

      // Bot Admin has some limited access like rebooting the bot or reloading commands.
      {
        level: 9,
        name: "Bot Admin",
        check: (User) => client.config.admins.includes(User.id)
      },

      // This is the bot owner, this should be the highest permission level available.
      // The reason this should be the highest level is because of dangerous commands such as eval
      // or exec (if the owner has that).
      {
        level: 10,
        name: "Bot Owner", 
        // Another simple check, compares the message author id to the one stored in the config file.
        check: (User) => client.config.ownerID === User.id
      }
    ],
    emojiConvertReference: {
      "?": ":question_mark:",
      "!": ":exclamation:"
    }
  };
};